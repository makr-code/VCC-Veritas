version: '3.8'

services:
  # ==========================================================================
  # PostgreSQL Database
  # ==========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: veritas-db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-veritas}
      POSTGRES_USER: ${DB_USER:-veritas_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password required}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-veritas_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - veritas-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # Redis Cache
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: veritas-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - veritas-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # VERITAS Backend API
  # ==========================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: ${APP_VERSION:-1.0.0}
    container_name: veritas-backend
    restart: always
    environment:
      # Application
      APP_ENV: production
      APP_NAME: ${APP_NAME:-VERITAS}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      DEBUG: "false"
      HOST: 0.0.0.0
      PORT: 8000
      
      # Database
      DB_TYPE: postgresql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-veritas}
      DB_USER: ${DB_USER:-veritas_user}
      DB_PASSWORD: ${DB_PASSWORD:?Database password required}
      DB_POOL_SIZE: 20
      DB_SSL_MODE: prefer
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:?Secret key required}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:?JWT secret key required}
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 60
      
      # Rate Limiting
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW_SECONDS: 60
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      LOG_OUTPUT: both
      
      # Monitoring
      METRICS_ENABLED: "true"
      HEALTH_CHECK_ENABLED: "true"
      
      # Ollama
      OLLAMA_ENABLED: ${OLLAMA_ENABLED:-true}
      OLLAMA_API_URL: ${OLLAMA_API_URL:-http://host.docker.internal:11434}
      
      # Backup
      BACKUP_ENABLED: "true"
      BACKUP_PATH: /backups
      
    volumes:
      - ./logs:/app/logs
      - ./backups:/backups
      - ./data:/app/data
    ports:
      - "${DOCKER_BACKEND_PORT:-8000}:8000"
      - "${METRICS_PORT:-9090}:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - veritas-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # ==========================================================================
  # VERITAS Frontend
  # ==========================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VERSION: ${APP_VERSION:-1.0.0}
        BACKEND_URL: http://backend:8000
    container_name: veritas-frontend
    restart: always
    environment:
      NODE_ENV: production
      BACKEND_URL: http://backend:8000
    ports:
      - "${DOCKER_FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - veritas-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M

  # ==========================================================================
  # Prometheus Monitoring
  # ==========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: veritas-prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${DOCKER_PROMETHEUS_PORT:-9091}:9090"
    depends_on:
      - backend
    networks:
      - veritas-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # Grafana Dashboards
  # ==========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: veritas-grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:?Grafana password required}
      GF_SERVER_ROOT_URL: ${GRAFANA_URL:-http://localhost:3001}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${DOCKER_GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - veritas-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # Nginx Reverse Proxy
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: veritas-nginx
    restart: always
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - veritas-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ==========================================================================
  # Backup Service (periodic backups)
  # ==========================================================================
  backup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.backup
    container_name: veritas-backup
    restart: always
    environment:
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      DB_HOST: postgres
      DB_NAME: ${DB_NAME:-veritas}
      DB_USER: ${DB_USER:-veritas_user}
      DB_PASSWORD: ${DB_PASSWORD:?Database password required}
      REMOTE_BACKUP_ENABLED: ${REMOTE_BACKUP_ENABLED:-false}
    volumes:
      - ./backups:/backups
      - ./data:/data:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - veritas-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# =============================================================================
# Networks
# =============================================================================
networks:
  veritas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
