name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # Code Quality & Linting
  # ============================================================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run Black (code formatting check)
      run: |
        black --check --diff backend/ shared/ tests/
      continue-on-error: true
      
    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff backend/ shared/ tests/
      continue-on-error: true
      
    - name: Run Flake8 (linting)
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend/ shared/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 backend/ shared/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
    - name: Run Pylint (advanced linting)
      run: |
        pylint backend/ shared/ --exit-zero --max-line-length=127
      continue-on-error: true

  # ============================================================================
  # Backend Tests
  # ============================================================================
  test-backend:
    name: Backend Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-xdist
        pip install PyJWT psutil
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short --maxfail=5
      timeout-minutes: 10
      
    - name: Run integration tests
      run: |
        pytest backend/api/test_security_integration.py -v --tb=short
      timeout-minutes: 5
      
    - name: Run agent tests
      run: |
        pytest backend/agents/ -v --tb=short -k "not load_performance"
      timeout-minutes: 10

  # ============================================================================
  # Frontend Tests
  # ============================================================================
  test-frontend:
    name: Frontend Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18', '20']
      fail-fast: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: |
        npm ci
        
    - name: Run linter
      working-directory: frontend
      run: |
        npm run lint || true
      continue-on-error: true
      
    - name: Run tests
      working-directory: frontend
      run: |
        npm test -- --passWithNoTests
      timeout-minutes: 5
      
    - name: Build frontend
      working-directory: frontend
      run: |
        npm run build
      timeout-minutes: 10

  # ============================================================================
  # Code Coverage
  # ============================================================================
  coverage:
    name: Code Coverage Report
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        pip install PyJWT psutil
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run tests with coverage
      run: |
        pytest tests/ backend/agents/ backend/api/ \
          --cov=backend \
          --cov=shared \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          -v \
          -k "not load_performance"
      
    - name: Generate coverage badge
      run: |
        pip install coverage-badge
        coverage-badge -o coverage.svg -f
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true
      
    - name: Archive coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          htmlcov/
          coverage.xml
          coverage.svg
        retention-days: 30

  # ============================================================================
  # Performance Tests
  # ============================================================================
  performance:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio psutil
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run performance tests
      run: |
        python backend/agents/test_load_performance_simple.py
      timeout-minutes: 15
      
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          performance_results_*.json
        retention-days: 90
      if: always()

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run Bandit (security linter)
      run: |
        bandit -r backend/ shared/ -f json -o bandit-report.json || true
        bandit -r backend/ shared/ -ll
      continue-on-error: true
      
    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json || true
        safety check
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30
      if: always()

  # ============================================================================
  # Build Docker Images
  # ============================================================================
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name != 'pull_request'
      
    - name: Extract metadata for Docker
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Extract metadata for frontend Docker
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================================================
  # Integration Status Check
  # ============================================================================
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend, coverage, security, build-docker]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Lint: ${{ needs.lint.result }}"
        echo "Backend Tests: ${{ needs.test-backend.result }}"
        echo "Frontend Tests: ${{ needs.test-frontend.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Docker Build: ${{ needs.build-docker.result }}"
        
        if [ "${{ needs.lint.result }}" != "success" ]; then
          echo "::warning::Linting checks did not pass"
        fi
        
        if [ "${{ needs.test-backend.result }}" != "success" ] || \
           [ "${{ needs.test-frontend.result }}" != "success" ]; then
          echo "::error::Tests failed"
          exit 1
        fi
        
        if [ "${{ needs.build-docker.result }}" != "success" ]; then
          echo "::error::Docker build failed"
          exit 1
        fi
        
        echo "✅ All critical CI checks passed!"
        
    - name: Post status to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ CI Pipeline completed successfully! All tests passed.'
          })
