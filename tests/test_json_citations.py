"""
Test JSON Citation Approach
============================

Testet ob LLM JSON generiert und wir es zu IEEE formatieren k√∂nnen.
"""

import requests
import json
import re

BACKEND_URL = "http://localhost:5000"

def test_json_citation_approach():
    """
    Test: JSON-strukturierte Antwort ‚Üí IEEE-Formatierung
    """
    
    print("="*80)
    print("üß™ TEST: JSON CITATION APPROACH")
    print("="*80)
    
    question = "Was regelt ¬ß 58 LBO BW?"
    
    print(f"\nüìù Frage: {question}")
    print(f"\n‚è≥ Sende Query an Backend...")
    
    payload = {
        "question": question,
        "mode": "intelligent",
        "session_id": "test-json-citations"
    }
    
    try:
        response = requests.post(
            f"{BACKEND_URL}/ask",
            json=payload,
            timeout=60
        )
        
        if response.status_code == 200:
            data = response.json()
            answer = data.get("answer", "")
            
            print(f"\n‚úÖ Antwort erhalten ({len(answer)} Zeichen)\n")
            
            # Zeige Antwort
            print("="*80)
            print("üìÑ ANTWORT:")
            print("="*80)
            print(answer)
            print("="*80)
            
            # Analysiere Antwort
            print("\nüìä CITATION ANALYSIS:")
            print("="*80)
            
            # Check for IEEE citations
            citations = re.findall(r'\[(\d+)\]', answer)
            print(f"\n‚úÖ IEEE Citations [N] gefunden: {len(citations)}")
            if citations:
                print(f"   ‚Üí {', '.join([f'[{c}]' for c in sorted(set(citations))])}")
            else:
                print("   ‚ùå KEINE Citations gefunden!")
            
            # Check for structure
            has_direct_answer = '**Direkte Antwort**' in answer or '**Direkte Antwort:**' in answer
            has_details = '**Details**' in answer or '**Details:**' in answer
            has_sources = '**Quellen**' in answer or '**Quellen:**' in answer
            has_follow_ups = 'üí°' in answer or '**Vorschl√§ge**' in answer
            
            print(f"\nüìã STRUKTUR:")
            print(f"   {'‚úÖ' if has_direct_answer else '‚ùå'} Direkte Antwort")
            print(f"   {'‚úÖ' if has_details else '‚ùå'} Details")
            print(f"   {'‚úÖ' if has_sources else '‚ùå'} Quellen")
            print(f"   {'‚úÖ' if has_follow_ups else '‚ùå'} Follow-ups (üí°)")
            
            # Check for legal references
            legal_refs = re.findall(r'¬ß\s*\d+', answer)
            print(f"\n‚öñÔ∏è Legal References (¬ß): {len(legal_refs)}")
            if legal_refs:
                print(f"   ‚Üí {', '.join(set(legal_refs))}")
            
            # Overall score
            print("\n" + "="*80)
            print("üéØ BEWERTUNG:")
            print("="*80)
            
            criteria_met = sum([
                len(citations) >= 2,
                has_direct_answer,
                has_details,
                has_sources,
                len(legal_refs) >= 1
            ])
            
            print(f"\n   Zitationen [N]: {'‚úÖ' if len(citations) >= 2 else '‚ùå'} ({len(citations)}/2+)")
            print(f"   Struktur vollst√§ndig: {'‚úÖ' if all([has_direct_answer, has_details, has_sources]) else '‚ùå'}")
            print(f"   Legal Refs: {'‚úÖ' if len(legal_refs) >= 1 else '‚ùå'} ({len(legal_refs)}/1+)")
            print(f"   Follow-ups: {'‚úÖ' if has_follow_ups else '‚ùå'}")
            
            print(f"\nüìä GESAMT: {criteria_met}/5 Kriterien erf√ºllt ({criteria_met/5*100:.0f}%)")
            
            if criteria_met >= 4:
                print("\n‚úÖ EXZELLENT - JSON Citation Approach funktioniert!")
            elif criteria_met >= 3:
                print("\n‚úÖ GUT - Deutliche Verbesserung!")
            elif criteria_met >= 2:
                print("\n‚ö†Ô∏è BEFRIEDIGEND - Teilweise Verbesserung")
            else:
                print("\n‚ùå UNZUREICHEND - Approach funktioniert nicht")
            
            # Check if answer looks like JSON (debugging)
            if answer.strip().startswith('{'):
                print("\n‚ö†Ô∏è WARNUNG: Antwort sieht wie raw JSON aus (Formatter nicht ausgef√ºhrt?)")
                try:
                    parsed = json.loads(answer)
                    print(f"   ‚Üí Valid JSON mit keys: {list(parsed.keys())}")
                except:
                    print("   ‚Üí Ung√ºltiges JSON")
            
        else:
            print(f"\n‚ùå Fehler: {response.status_code}")
            print(response.text)
            
    except Exception as e:
        print(f"\n‚ùå Exception: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_json_citation_approach()
